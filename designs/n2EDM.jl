using PyPlot

push!(LOAD_PATH, pwd())
using Coils
using CoilsPlot


vertex_positions = [
    # floor
    [0,0*1546,0],
    [0,1*1546,0],
    [0,2*1546,0],
    [0,3*1546,0],
    [0,4*1546,0],
    [0,5*1546,0],
    [0,6*1546,0],
    [0,7*1546,0],

    [1480,0*1546,0],
    [1480,1*1546,0],
    [1480,2*1546,0],
    [1480,3*1546,0],
    [1480,4*1546,0],
    [1480,5*1546,0],
    [1480,6*1546,0],
    [1480,7*1546,0],

    [2*1480,0*1546,0],
    [2*1480,1*1546,0],
    [2*1480,2*1546,0],
    [2*1480,3*1546,0],
    [2*1480,4*1546,0],
    [2*1480,5*1546,0],
    [2*1480,6*1546,0],
    [2*1480,7*1546,0],

    [2*1480+1300,0*1546,0],
    [2*1480+1300,1*1546,0],
    [2*1480+1300,2*1546,0],
    [2*1480+1300,3*1546,0],
    [2*1480+1300,4*1546,0],
    [2*1480+1300,5*1546,0],
    [2*1480+1300,6*1546,0],
    [2*1480+1300,7*1546,0],

    [2*1480+1300+1*1070,0*1546,0],
    [2*1480+1300+1*1070,1*1546,0],
    [2*1480+1300+1*1070,2*1546,0],
    [2*1480+1300+1*1070,3*1546,0],
    [2*1480+1300+1*1070,4*1546,0],
    [2*1480+1300+1*1070,5*1546,0],
    [2*1480+1300+1*1070,6*1546,0],
    [2*1480+1300+1*1070,7*1546,0],

    [2*1480+1300+2*1070,0*1546,0],
    [2*1480+1300+2*1070,1*1546,0],
    [2*1480+1300+2*1070,2*1546,0],
    [2*1480+1300+2*1070,3*1546,0],
    [2*1480+1300+2*1070,4*1546,0],
    [2*1480+1300+2*1070,5*1546,0],
    [2*1480+1300+2*1070,6*1546,0],
    [2*1480+1300+2*1070,7*1546,0],

    [2*1480+1300+2*1070+974,0*1546,0],
    [2*1480+1300+2*1070+974,1*1546,0],
    [2*1480+1300+2*1070+974,2*1546,0],
    [2*1480+1300+2*1070+1300,2*1546,0],
    [2*1480+1300+2*1070+1300,3*1546,0],
    [2*1480+1300+2*1070+1300,4*1546,0],
    [2*1480+1300+2*1070+1300,5*1546,0],
    [2*1480+1300+2*1070+1300,6*1546,0],
    [2*1480+1300+2*1070+1300,7*1546,0],

    [2*1480+1300+2*1070+1300+1724,2*1546,0],
    [2*1480+1300+2*1070+1300+1724,3*1546,0],
    [2*1480+1300+2*1070+1300+1724,4*1546,0],
    [2*1480+1300+2*1070+1300+1724,5*1546,0],
    [2*1480+1300+2*1070+1300+1724,6*1546,0],
    [2*1480+1300+2*1070+1300+1724,7*1546,0],


    # ceiling
    [0,0*1546,8480],
    [0,1*1546,8480],
    [0,2*1546,8480],
    [0,3*1546,8480],
    [0,4*1546,8480],
    [0,5*1546,8480],
    [0,6*1546,8480],
    [0,7*1546,8480],

    [1480,0*1546,8480],
    [1480,1*1546,8480],
    [1480,2*1546,8480],
    [1480,3*1546,8480],
    [1480,4*1546,8480],
    [1480,5*1546,8480],
    [1480,6*1546,8480],
    [1480,7*1546,8480],

    [2*1480,0*1546,8480],
    [2*1480,1*1546,8480],
    [2*1480,2*1546,8480],
    [2*1480,3*1546,8480],
    [2*1480,4*1546,8480],
    [2*1480,5*1546,8480],
    [2*1480,6*1546,8480],
    [2*1480,7*1546,8480],

    [2*1480+1300,0*1546,8480],
    [2*1480+1300,1*1546,8480],
    [2*1480+1300,2*1546,8480],
    [2*1480+1300,3*1546,8480],
    [2*1480+1300,4*1546,8480],
    [2*1480+1300,5*1546,8480],
    [2*1480+1300,6*1546,8480],
    [2*1480+1300,7*1546,8480],

    [2*1480+1300+1*1070,0*1546,8480],
    [2*1480+1300+1*1070,1*1546,8480],
    [2*1480+1300+1*1070,2*1546,8480],
    [2*1480+1300+1*1070,3*1546,8480],
    [2*1480+1300+1*1070,4*1546,8480],
    [2*1480+1300+1*1070,5*1546,8480],
    [2*1480+1300+1*1070,6*1546,8480],
    [2*1480+1300+1*1070,7*1546,8480],

    [2*1480+1300+2*1070,0*1546,8480],
    [2*1480+1300+2*1070,1*1546,8480],
    [2*1480+1300+2*1070,2*1546,8480],
    [2*1480+1300+2*1070,3*1546,8480],
    [2*1480+1300+2*1070,4*1546,8480],
    [2*1480+1300+2*1070,5*1546,8480],
    [2*1480+1300+2*1070,6*1546,8480],
    [2*1480+1300+2*1070,7*1546,8480],

    [2*1480+1300+2*1070+974,0*1546,8480],
    [2*1480+1300+2*1070+974,1*1546,8480],
    [2*1480+1300+2*1070+974,2*1546,8480],
    [2*1480+1300+2*1070+1300,2*1546,8480],
    [2*1480+1300+2*1070+1300,3*1546,8480],
    [2*1480+1300+2*1070+1300,4*1546,8480],
    [2*1480+1300+2*1070+1300,5*1546,8480],
    [2*1480+1300+2*1070+1300,6*1546,8480],
    [2*1480+1300+2*1070+1300,7*1546,8480],

    [2*1480+1300+2*1070+1300+1724,2*1546,8480],
    [2*1480+1300+2*1070+1300+1724,3*1546,8480],
    [2*1480+1300+2*1070+1300+1724,4*1546,8480],
    [2*1480+1300+2*1070+1300+1724,5*1546,8480],
    [2*1480+1300+2*1070+1300+1724,6*1546,8480],
    [2*1480+1300+2*1070+1300+1724,7*1546,8480],

    # front
    [0*1480+0*1300+0*1070+0*974,0,1*1696],
    [0*1480+0*1300+0*1070+0*974,0,1*1696+604],
    [1*1480+0*1300+0*1070+0*974,0,1*1696+604],
    [2*1480+0*1300+0*1070+0*974,0,1*1696+604],
    [2*1480+0*1300+0*1070+0*974,0,1*1696],
    [2*1480+1*1300+0*1070+0*974,0,1*1696],
    [2*1480+1*1300+1*1070+0*974,0,1*1696],
    [2*1480+1*1300+2*1070+0*974,0,1*1696],
    [2*1480+1*1300+2*1070+1*974,0,1*1696],

    [0*1480+0*1300+0*1070+0*974,0,2*1696],
    [1*1480+0*1300+0*1070+0*974,0,2*1696],
    [2*1480+0*1300+0*1070+0*974,0,2*1696],
    [2*1480+0*1300+0*1070+0*974,0,2*1696-415],
    [2*1480+1*1300+0*1070+0*974,0,2*1696-415],
    [2*1480+1*1300+1*1070+0*974,0,2*1696-415],
    [2*1480+1*1300+2*1070+0*974,0,2*1696-415],
    [2*1480+1000,0,2*1696-415],
    [2*1480+1000+1600,0,2*1696-415],
    [2*1480+1*1300+2*1070+0*974,0,2*1696],
    [2*1480+1*1300+2*1070+1*974,0,2*1696],

    [0*1480+0*1300+0*1070+0*974,0,3*1696],
    [1*1480+0*1300+0*1070+0*974,0,3*1696],
    [2*1480+0*1300+0*1070+0*974,0,3*1696],
    [2*1480+0*1300+0*1070+0*974,0,3*1696+100],
    [2*1480+1*1300+0*1070+0*974,0,3*1696+100],
    [2*1480+1*1300+1*1070+0*974,0,3*1696+100],
    [2*1480+1*1300+2*1070+0*974,0,3*1696+100],
    [2*1480+1000,0,3*1696+100],
    [2*1480+1000+1600,0,3*1696+100],
    [2*1480+1*1300+2*1070+0*974,0,3*1696],
    [2*1480+1*1300+2*1070+1*974,0,3*1696],

    [0*1480+0*1300+0*1070+0*974,0,4*1696],
    [1*1480+0*1300+0*1070+0*974,0,4*1696],
    [2*1480+0*1300+0*1070+0*974,0,4*1696],
    [2*1480+1*1300+0*1070+0*974,0,4*1696],
    [2*1480+1*1300+1*1070+0*974,0,4*1696],
    [2*1480+1*1300+2*1070+0*974,0,4*1696],
    [2*1480+1*1300+2*1070+1*974,0,4*1696],

    # the kink in the front
    [2*1480+1*1300+2*1070+1*974,1*1546,1*1696],
    [2*1480+1*1300+2*1070+1*974,1*1546,2*1696],
    [2*1480+1*1300+2*1070+1*974,1*1546,3*1696],
    [2*1480+1*1300+2*1070+1*974,1*1546,4*1696],

    [2*1480+1*1300+2*1070+1*974,2*1546,1*1696],
    [2*1480+1*1300+2*1070+1*974,2*1546,2*1696],
    [2*1480+1*1300+2*1070+1*974,2*1546,3*1696],
    [2*1480+1*1300+2*1070+1*974,2*1546,4*1696],

    [2*1480+1*1300+2*1070+1*974+326,2*1546,1*1696],
    [2*1480+1*1300+2*1070+1*974+326,2*1546,2*1696],
    [2*1480+1*1300+2*1070+1*974+326,2*1546,3*1696],
    [2*1480+1*1300+2*1070+1*974+326,2*1546,4*1696],


    # right side
    [2*1480+1*1300+2*1070+1*974+326+1724,2*1546,1*1696],
    [2*1480+1*1300+2*1070+1*974+326+1724,3*1546,1*1696],
    [2*1480+1*1300+2*1070+1*974+326+1724,4*1546,1*1696],
    [2*1480+1*1300+2*1070+1*974+326+1724,5*1546,1*1696],
    [2*1480+1*1300+2*1070+1*974+326+1724,6*1546,1*1696],

    [2*1480+1*1300+2*1070+1*974+326+1724,2*1546,2*1696],
    [2*1480+1*1300+2*1070+1*974+326+1724,3*1546,2*1696],
    [2*1480+1*1300+2*1070+1*974+326+1724,4*1546,2*1696],
    [2*1480+1*1300+2*1070+1*974+326+1724,5*1546,2*1696],
    [2*1480+1*1300+2*1070+1*974+326+1724,6*1546,2*1696],

    [2*1480+1*1300+2*1070+1*974+326+1724,2*1546,3*1696],
    [2*1480+1*1300+2*1070+1*974+326+1724,3*1546,3*1696],
    [2*1480+1*1300+2*1070+1*974+326+1724,4*1546,3*1696],
    [2*1480+1*1300+2*1070+1*974+326+1724,5*1546,3*1696],
    [2*1480+1*1300+2*1070+1*974+326+1724,6*1546,3*1696],

    [2*1480+1*1300+2*1070+1*974+326+1724,2*1546,4*1696],
    [2*1480+1*1300+2*1070+1*974+326+1724,3*1546,4*1696],
    [2*1480+1*1300+2*1070+1*974+326+1724,4*1546,4*1696],
    [2*1480+1*1300+2*1070+1*974+326+1724,5*1546,4*1696],
    [2*1480+1*1300+2*1070+1*974+326+1724,6*1546,4*1696],


    # left side
    [0,1*1546,1*1696],
    [0,2*1546,1*1696],
    [0,3*1546,1*1696],
    [0,4*1546,1*1696],
    [0,5*1546,1*1696],
    [0,6*1546,1*1696],

    [0,1*1546,2*1696],
    [0,2*1546,2*1696],
    [0,3*1546,2*1696],
    [0,4*1546,2*1696],
    [0,5*1546,2*1696],
    [0,6*1546,2*1696],

    [0,4*1546,2*1696+250],
    [0,5*1546,2*1696+250],

    [0,1*1546,3*1696],
    [0,2*1546,3*1696],
    [0,3*1546,3*1696],
    [0,4*1546,3*1696],
    [0,5*1546,3*1696],
    [0,6*1546,3*1696],

    [0,1*1546,4*1696],
    [0,2*1546,4*1696],
    [0,3*1546,4*1696],
    [0,4*1546,4*1696],
    [0,5*1546,4*1696],
    [0,6*1546,4*1696],


    # back
    [0*1480+0*1300+0*1070+0*1300+0*1724,10822,1*1696],
    [0*1480+0*1300+0*1070+0*1300+0*1724,10822,1*1696+604],
    [1*1480+0*1300+0*1070+0*1300+0*1724,10822,1*1696+604],
    [1*1480+0*1300+0*1070+0*1300+0*1724,10822,1*1696],
    [2*1480+0*1300+0*1070+0*1300+0*1724,10822,1*1696],
    [2*1480+1*1300+0*1070+0*1300+0*1724,10822,1*1696],
    [2*1480+1*1300+1*1070+0*1300+0*1724,10822,1*1696],
    [2*1480+1*1300+2*1070+0*1300+0*1724,10822,1*1696],
    [2*1480+1*1300+2*1070+1*1300+0*1724,10822,1*1696],
    [2*1480+1*1300+2*1070+1*1300+1*1724,10822,1*1696],

    [0*1480+0*1300+0*1070+0*1300+0*1724,10822,2*1696],
    [1*1480+0*1300+0*1070+0*1300+0*1724,10822,2*1696],
    [2*1480+0*1300+0*1070+0*1300+0*1724,10822,2*1696],
    [2*1480+1*1300+0*1070+0*1300+0*1724,10822,2*1696],
    [2*1480+1*1300+1*1070+0*1300+0*1724,10822,2*1696],
    [2*1480+1*1300+2*1070+0*1300+0*1724,10822,2*1696],
    [2*1480+1*1300+2*1070+1*1300+0*1724,10822,2*1696],
    [2*1480+1*1300+2*1070+1*1300+1*1724,10822,2*1696],

    [0*1480+0*1300+0*1070+0*1300+0*1724,10822,3*1696],
    [1*1480+0*1300+0*1070+0*1300+0*1724,10822,3*1696],
    [2*1480+0*1300+0*1070+0*1300+0*1724,10822,3*1696],
    [2*1480+1*1300+0*1070+0*1300+0*1724,10822,3*1696],
    [2*1480+1*1300+1*1070+0*1300+0*1724,10822,3*1696],
    [2*1480+1*1300+2*1070+0*1300+0*1724,10822,3*1696],
    [2*1480+1*1300+2*1070+1*1300+0*1724,10822,3*1696],
    [2*1480+1*1300+2*1070+1*1300+1*1724,10822,3*1696],

    [0*1480+0*1300+0*1070+0*1300+0*1724,10822,4*1696],
    [1*1480+0*1300+0*1070+0*1300+0*1724,10822,4*1696],
    [2*1480+0*1300+0*1070+0*1300+0*1724,10822,4*1696],
    [2*1480+1*1300+0*1070+0*1300+0*1724,10822,4*1696],
    [2*1480+1*1300+1*1070+0*1300+0*1724,10822,4*1696],
    [2*1480+1*1300+2*1070+0*1300+0*1724,10822,4*1696],
    [2*1480+1*1300+2*1070+1*1300+0*1724,10822,4*1696],
    [2*1480+1*1300+2*1070+1*1300+1*1724,10822,4*1696],

]

g = DiGraph()
add_vertices!(g, length(vertex_positions))


# add the edges

# add to all closer to each other than a threshold
dist_threshold = 1750
for i in eachindex(vertex_positions)
    for j in (i+1):length(vertex_positions)
        # exactly two of the carthesian coordinates need to be shared
        count(abs.(vertex_positions[i] .- vertex_positions[j]) .< 0.001) == 2 || continue
        if norm(vertex_positions[i] .- vertex_positions[j])  < dist_threshold
            add_edge!(g, i, j)
        end
    end
end

# manual fixes

# front
rem_edge!(g, 127, 136)
rem_edge!(g, 130, 138)
rem_edge!(g, 131, 138)
rem_edge!(g, 131, 139)
rem_edge!(g, 134, 145)
rem_edge!(g, 138, 150)
rem_edge!(g, 139, 149)
rem_edge!(g, 139, 150)
rem_edge!(g, 145, 153)
rem_edge!(g, 142, 156)
rem_edge!(g, 139, 140)
rem_edge!(g, 139, 141)
rem_edge!(g, 139, 144)
rem_edge!(g, 141, 143)
rem_edge!(g, 143, 144)
rem_edge!(g, 140, 144)
rem_edge!(g, 140, 142)
rem_edge!(g, 141, 142)
rem_edge!(g, 150, 151)
rem_edge!(g, 150, 152)
rem_edge!(g, 150, 155)
rem_edge!(g, 152, 154)
rem_edge!(g, 154, 155)
rem_edge!(g, 153, 154)
rem_edge!(g, 151, 155)
rem_edge!(g, 151, 153)
rem_edge!(g, 152, 153)
rem_edge!(g, 149, 160)
rem_edge!(g, 156, 163)

add_edge!(g, 143, 154)
add_edge!(g, 144, 155)

# SC magnet
rem_edge!(g, 206, 207)
rem_edge!(g, 206, 214)
rem_edge!(g, 207, 215)

# escape route on the back
rem_edge!(g, 223, 226)
rem_edge!(g, 223, 233)
rem_edge!(g, 226, 234)

# near the kink
rem_edge!(g, 43, 52)
rem_edge!(g, 106, 115)


add_edge!(g, 9, 129)

poi = cuboid_poi([0.3, 0.3, 0.3], [0.0, (0.5 - 0.3 - 0.1) / 2, 0.0], [9, 9, 9], filled = true)

function design(Bgoal, name)
    simpleloops, simpleloopscurrents = solve_system(g, vertex_positions, poi, Bgoal,
        verbose = true, tolerance = 1e-20, bigfloat = true,
        initialcells = [[1, 2, 3, 4, 5, 32, 47, 62, 80, 79, 78, 77, 76, 61, 46, 31, 1]])

    elemcurrents = [1.0, 0.1, 0.01]
    simpleloopscurrents_decomp = decompose_currents(simpleloopscurrents, elemcurrents)

    save_report("small_$name", vertex_positions, g, poi, Bgoal, simpleloops,
        simpleloopscurrents, elemcurrents, simpleloopscurrents_decomp)
end

design(x -> [100e-6, 0, 0], "X")
design(x -> [0, 100e-6, 0], "Y")
design(x -> [0, 0, 100e-6], "Z")

design(x -> [100e-6 * x[1], 0, 0], "dBx_dx")
design(x -> [100e-6 * x[2], 0, 0], "dBx_dy")
design(x -> [100e-6 * x[3], 0, 0], "dBx_dz")

design(x -> [0, 100e-6 * x[1], 0], "dBy_dx")
design(x -> [0, 100e-6 * x[2], 0], "dBy_dy")
design(x -> [0, 100e-6 * x[3], 0], "dBy_dz")

design(x -> [0, 0, 100e-6 * x[1]], "dBz_dx")
design(x -> [0, 0, 100e-6 * x[2]], "dBz_dy")
design(x -> [0, 0, 100e-6 * x[3]], "dBz_dz")
